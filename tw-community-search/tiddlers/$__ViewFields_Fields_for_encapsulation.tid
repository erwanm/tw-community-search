title: $:/ViewFields/
created: 20151228183621050
highlighted_coding: 
modified: 20160102015639024
stylesheet: And stylesheets can instead of being static tiddlers be aggregations of such styling fields!
original-tags: 
source-wiki-id: ViewFields
source-tiddler-title-as-text: 
source-tiddler-title-as-link: 

Frankly... this would simplify a LOT when it comes to styling, IMO. Centralization has its benefits but when you're standing in a place, you need access to the data then and there. Not only do you (ok, I) not want to go scour for the separate stylesheet but it is often also a matter of locating which specific css definitions that are concerned. 

Obviously, //some// things - even many - are better kept in global stylesheets. But much of the //user created// stuff is probably not.
styling: Also the stylesheets for CSS;

```
<style>
 ...css
</style>
```

...would be more elegantly baked into a surrounding field container, particularly suitable for "tiddler local" styles.

The above refers to full fledged stylesheets but even smaller bits like WikiText formatting for paragrapgs would, or at least could, be more nicely applied. The very code piecelet just stated is surriounded with triple backticks. 

Again, putting this in a separate section, yet within the same tiddler where you're coding, would simplify  things if you can also fold/expand on demand... but //particularly// if the 
tags: 
title: Fields for encapsulation
wikitext: ...but even some parts of [[WikiText|]] could have a nicer UI in separate fields. I'm thinking particularly of //blocks// of ~WikiText where instead the whole field is styled. This has a few advantages;

*No(?) need to learn those parts in wikitext
*Reduced frustration on international keyboards where e.g bakticks, tilde etc are not as straight forward as on English keyboards
*Customized block formatting - once set up it's as easy to apply it as any other core formatting
*A more modern feel to the UI. Manual typing of special characters is primitive and low level //if you're forced to do it//.
*A more //coherent// UI experience.
*Should be easy(?) to introduce more preformatted blocks to core, including e.g highlighted coding (see below).

In all it makes for a lower barrier of entry to TW (there are too many anyway).

For in-browser, in-TW end-user work, I think //macros// are as close to coding a user gets. 
Fields could (...perhaps) be used as an elegant UI for macros! Currently a macro is created by typing;

```
\define MacroName(parameter1, parameter2)
codeli-code
\end
```

Imagine if the `\define` and `\end` were replaced with whatever defines the beginning and end of a field! In other words, the user wouldn't have to bother with either remembering or using those odd backslashes nor the special keywords. (Besides, why is the keyword "define" and not "macro"? Or we should refer to them as "definitions". Double nomenclature is confusing.) And tagging it (the tiddler, I guess) could be done by getting a tag selection drop down just next to the type selector, i.e based on "typical" tags for the type (presumably `$:/tags/Macro`. 

And the macro name could perhaps be replaced with the field name! 

Further, writing more complex macros - like the ~FieldDisplayer - I get many such definitions in one tiddler and it's a hassle to scroll around between them. With macros in sections and a folding mechanism, it would be much easier and it's of course more in alignment with other coding environments.

!!!Highlighting code

By //dedicating// a field container to it's content (i.e setting the type of the field), the difficulty is encapsulated and I'm guessing we could introduce e.g coloring of keywords, selectively block parsing, etc instead of the current `triple backtic to get monospace` for code.

When talking about displaying code snips in another context, Jeremy briefly said something along the lines of "it would be coold if one could iframe tiddlers" (possible misrepresentation there). Surely, it would be easy to iframe fields (or at least their content)!

