title: $:/inmysocks/Setting the CSS Class of a Link Based on Tags at the Link Destination
blurb:  That is a long title
created: 20150311234526020
modified: 20150312000139094
original-tags: [[Wiki Examples]]
source-wiki-id: inmysocks
source-tiddler-title-as-text: Setting the CSS Class of a Link Based on Tags at the Link Destination
source-tiddler-title-as-link: Setting%20the%20CSS%20Class%20of%20a%20Link%20Based%20on%20Tags%20at%20the%20Link%20Destination

This allows you to give custom css styles to links if the link destination tiddler has a specific tag.

Note: If the destination tiddler has more than one of the listed tags one link for each style associated with the tags it has will be displayed.

If the tiddler you are linking to has spaces in the name you need to put `[[` and `]]` around the name.

!First, the macros (in the tiddler NeatLinkMacros):

```
\define GetLinkClass()
$(TagUsed)$_css
\end

\define MakeNeatLinkEntry(tiddler tagUsed)
<$list filter='[[$tiddler$]tag[$tagUsed$]]'>
<$set name=TagUsed value=$tagUsed$>
<<GetLinkClass>>
<span class=<<GetLinkClass>>><$link to="$tiddler$">$tiddler$</$link></span>
</$set>
</$list>
\end

\define MakeBoringLinkEntry(tiddler)
<$list filter='[[$tiddler$]!tag[tag1]!tag[tag2]!tag[tag3]]'>
<$link to=$tiddler$>$tiddler$</$link>
</$list>
\end

\define NeatLink(tiddler)
<<MakeNeatLinkEntry """$tiddler$""" tag1>>
<<MakeNeatLinkEntry """$tiddler$""" tag2>>
<<MakeNeatLinkEntry """$tiddler$""" tag3>>
<<MakeBoringLinkEntry """$tiddler$""">>
\end
```

You will need to change this macro to suit your situation, you need to edit the `NeatLink` macro itself and the `MakeBoringLinkEntry` macro. Specifically, you need to add a line like `<<MakeNeatLinkEntry """$tiddler$""" tagn>>` to the neat link macro for each tag you want a custom link style for, and make sure to replace tag1, tag2, tag3, etc with the tags you actually want to use. You also need to edit the filter in the `MakeBoringEntry` macro so that you replace tag1, tag2, tag3, etc with the tags you are using, adding or removing entries as needed.

!Second, the CSS (in the tiddler NeatLinkCSS)

You need to make css classes for each tag you want special links for, the names have to be in the form `tag1_css`, so if you have a tag bob, the css class associated with it would be bob_css. This means that the tags need to be valid css class names.

You also have to specify the `a` tag in your css. I don't know why, but it doesn't work otherwise.

Example css:

```
.tag1_css a {
color:green;
}

.tag1_css a:hover {
color:orange;
}

.tag2_css a {
color:red;
}

.tag2_css a:hover {
color:black;
}

.tag3_css a {
color:yellow;
}

.tag3_css a:hover {
color:pink;
}
```

Then to use the links just use the macro `<<NeatLink SomeTiddler>>`.

Examples:

<<NeatLink NeatLinkExample1>>

<<NeatLink [[Neat Link Example 2]]>>

<<NeatLink [[Neat Link Example 3]]>>

<<bottomOfTiddler>>