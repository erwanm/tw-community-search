title: $:/Interactive Fiction Engine (inmysocks)/Documentation
created: 20141122235654864
modified: 20141129020613360
tags: 
source-wiki-id: Interactive Fiction Engine (inmysocks)
source-tiddler-title-as-text: Documentation
source-tiddler-title-as-link: Documentation

Click on the 'open editing screen' button in the upper left.
In  the tiddler that opens you will see:

*A dropdown menu  to change the map state. This sets the player location to the selected room so it can be viewed in the main playing window.
*A set of radio buttons to serlect the object type being edited
*(possibly) an option to select between creating a new objet or editing an existing object.
*An object type specific editing interface.

The object types available are:

*Rooms: a room is the basic unit in the game. You navigate between rooms via exits and a room has a description. the room description can contain arbitrary wikitext. A room has a description and a list of exits. A room is the largest container and cannot be contained in any other container type, and can contain any other object type.
*Items: items are objects that can be picked up and put into the special inventory location that allows them to be accessed from anywhere the player is. Items have descriptions and locations. Items can contain events and triggers.
*Containers: Containers are generic containers that have a description and a location. Containers can not be moved (aside from manipulation of events, I will talk about this later). Containers can hold items, events and triggers. I may add nested containers later.
*Events: Events are pieces of wikitext that have two states. Which state is displayed is controlled by a trigger assigned to the event. Events can contain items, containers, events and triggers. (I may try to add the option to put room exits to events.)
*Pop-ups: Pop-ups are modal windows that are displayed when a button is pressed. A pop-up can contain events and triggers. (I may change things so that items can be in pop-ups. Items should not be dropped in pop-ups. But that may just be a container.)
*Introduction window: this is what is displayed as an introduction screen, it can contain arbitrary wikitext.

Create or edit rooms:

Change the text to whatever you want, check the check boxes to set which exits a room should have (north, south, east, west, up or down) and select the room that should be navigated to by using that exit. If you want to be able to use the map currently you have to use rooms labeled room1 to room25 in the same layout as in the example game (1 in the upper left and 25 in the lower right counting by rows.) Otherwise the map will do nothing. I am hooing to find a way around this later.

Create or edit containers:

Give the container a name and a description. Events, objects and triggers are placed inside the container by editing the object, not the container.

Create or edit items:

Give the item a name and a location.

Create or edit events:

The event will be in state1 or state2 based on a trigger. When you edit an event you only edit the text in each state and set the trigger for the event. Other events, triggers or items are placed in that event by changing the location of the contained object.

Create or edit triggers:

Give the trigger a name and location for the inactive and active states, and event type and durations. A permanent trigger is set changed from inactive to active by the button and stays that way forever. A switch can be switched between states by the buttons in the locations set. The location of the trigger can be set for both the active and in active states.

Examples:

The coded note in the example game would be created as follows:

Create an item called `Coded note` and set its location. Leave the description blank.

Create an item called Dictionary and give it a description.

Create a trigger and give it some name, set its type to button and  its duration to permanent. set its location to Dictionary.

Create an event and give it some name. In the state one description put the description of the note when it is coded. Write the description of the decoded note in the second state.  Set the location of both states to `Coded Note` and set the trigger to the trigger you created.

Unfotunately location based triggers aren't possible yet, so the way the event is handled in the example games isn't possible yet. You could also make triggers and events so that you can have a trigger in the dictionary, and an event inside the state1 of the event in the coded note that is empty in state1, and has a trigger in state2. the trigger in the inside state2 switches the outer event from state 1 to state2, which is the decoded state.

*Coded note
**Event11 - coded state (given location of coded note)
***event2State1 - empty (given a location of event11)
***Event2state2 (given a location of event11)
****Trigger1 for event1 (that is set the trigger when editing event1 to trigger1)
**event12 - decoded state (given location of coded note)

*dictionary
**Description of dictionary - part of dictionary item
**event31 (given location of dictionary) (button called read dictionary or similar)
***Trigger2 for event2 AND event3 (this trigger is given a location of Event31) (this is only one trigger, when editing event2 and event3 set the trigger to Trigger2)
**event32 - empty (given location of Event32) (after dictionary is read no longer display the button)

For now the reset button will need To be updated manually for now, look at and edit ResetButtonModalDialog to update the reset button.

You will need to reset the trigger states, item locations and the initial player location. The lines will follow these patterns.

`<$action-setfield $tiddler=itemName $field=location $value=initialLocation/>`

`<$action-setfield $tiddler=triggerName $field=text $value=inactive/>`

`<$action-setfield $tiddler=MapState $field=text $value=initialRoom/>`

If you want to display the introduction text include leave the following line

`<$action-setfield $tiddler='$:/state/game_state' $field=text $value=start/>`

And always leave the lines closing the tiddler.

!Making new trigger types
Edit the tidder EventTriggerTemplate to make a new trigger type. And the NewTriggerTemplate and TriggerEditTemplate

That should be everything. The triggers  should be all that is missing.