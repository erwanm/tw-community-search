title: $:/TW5Hacks/DetailsWidget
accordion1: 
accordion2: 
accordion3: 
accordion4: 
caption: details
created: 20170130234539362
creator: Thomas Elmiger
modified: 20180929073642830
modifier: Thomas Elmiger
priority: W
type: text/vnd.tiddlywiki
widget-author: <$details summary="Author" tiddler="FollowMe"> <p>''Thomas Elmiger'' </p><$transclude tiddler="FollowMe" mode="block"/></$details>
original-tags: Widgets
source-wiki-id: TW5Hacks
source-tiddler-title-as-text: DetailsWidget
source-tiddler-title-as-link: DetailsWidget

!! Introduction

The details widget creates an HTML 5 `<details>` section including a `<summary>`. Users can click on the summary to open and close a block containing more details. 

<$button>
<$action-setfield accordion1="open" accordion2="open" accordion3="open" accordion4="open"/>
Open all
</$button> 
<$button>
<$action-setfield accordion1="" accordion2="" accordion3="" accordion4=""/>
Close all
</$button>

<$details summary="What the W3C says about details" state="!!accordion1">

<<<
The [[details|http://w3c.github.io/html/interactive-elements.html#elementdef-details]] element represents a disclosure widget from which the user can obtain additional information or controls.

''NOTE:'' //The details element is not appropriate for footnotes. Please see [[§4.13.5 Footnotes|http://w3c.github.io/html/common-idioms-without-dedicated-elements.html#footnotes]] for details on how to mark up footnotes.//

The first [[summary|http://w3c.github.io/html/interactive-elements.html#elementdef-summary]] element child of the element, if any, represents the summary or legend of the details. If there is no child summary element, the user agent should provide its own legend (e.g., "Details").

<<< [[W3C on Github|http://w3c.github.io/html/interactive-elements.html#the-details-element]]

</$details>

<$details summary="Compare the RevealWidget and the DeatilsWidget" state="!!accordion2">

The RevealWidget can be used in similar ways, it hides or shows its content depending upon the value of a [[state tiddler|StateTiddlers]]. It is worth noting that:

* The DetailsWidget in its most simple form is independet from a state tiddler. It’s open or closed state falls back to the original state whenever a tiddler or wiki ist refreshed in the browser. 
* Without a state reference, content can be revealed instantaneous because it is the browser alone that shows or hides it. No TiddlyWiki rendering is needed. 
* However you can optionally use a //state// reference: a tiddler, field or index that will be updated automagically every time when details is opened or closed. The referenced text must be "open" to show the details. The RevealWidget in contrast can check for any given text.

</$details>

<$details class="notification" summary="Missing Browser Support" state="!!accordion3">

* Microsoft has tried to implement details/summary in their ''Edge'' browser without success. In September 2018 it was listed with “Roadmap Priority: High — We intend to begin development soon.” – see their [[Platform status|https://developer.microsoft.com/en-us/microsoft-edge/platform/status/detailssummary/]].
* ''Internet Explorer'' in general and ''Opera Mini'' do not support details/summary.
* Other browsers might not support animation effects on opening or closing – one Android browser has problems with accessibility.
* Apple iOS mobile browsers lacked support of toggle events on details when this was developped, therefore we emulate it using click events. In mobile Safari this can have the side effect, that users must tap twice to open/close details or to activate links in details. 
* See https://caniuse.com/#search=details for other browsers and updated information.

</$details>

<$details summary="What is needed to use and style the details widget"  state="!!accordion4">

The author hopes that this handy widget will be part of the official plugin library at some time (and maybe in the core later). For the moment you will have to [[import the DetailsWidget plugin|https://tid.li/tw5/plugins.html]] or drag these links over to your wiki:

!!! Details Components
* the widget: $:/plugins/telmiger/details/details.js
* the styles: $:/plugins/telmiger/details/details.css
* the colours: $:/plugins/telmiger/details/colours.css

''Important:'' This solution worked for me and for others, but I am not a javascript expert! So ''do yourself a favour and save a backup'' of your wiki first. After importing you will have to reload so the widget’s script can take effect. 

{{!!widget-author}}

</$details>

<$button>
<$action-setfield accordion1="open" accordion2="open" accordion3="open" accordion4="open"/>
Open all
</$button> 
<$button>
<$action-setfield accordion1="" accordion2="" accordion3="" accordion4=""/>
Close all
</$button>

!! Content and Attributes

How the content of the `<$details>` widget is displayed depends on the parameters shown in the following table.

|!Parameter |!Description |
|summary |Optional text to display as summary. Wins over field (see below). |
|open |Optional initial state, set to "open" to show details on load. Defaults to "". |
|state |An optional TextReference containing the state. Wins over open. |
|field |Optionally, the summary is taken from the field with this name in a given tiddler. Defaults to "title". |
|tiddler |Optional title of a tiddler to watch, connected to field. Defaults to current tiddler. |
|class |Optional CSS classes to be assigned to the details tag. Predefined: "notification", "warning", "success"|

!! Examples

* [[Details Basic Examples]]
* [[Details Advanced Examples]] – including examples with state reference

!! More
<$details summary="What details could be useful for">

!!!! Here are some ideas
* Create a simple accordion as seen at the top of this page. 
* List tiddlers and give users the possibility to see their contents immediately.
* Open a drawing canvas (image tiddler in edit mode)
* Show a variant/alternative (e.g. a visualisation)

</$details>