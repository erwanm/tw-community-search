title: $:/ViewFields/
created: 20160101205811624
example: This example is (just!) a primitive idea for an interface. For one thing, the "tools" should proably hide unless hovered or some  such. Anyway, //this whole section// is really a field titled //example//.
original-tags: 
source-wiki-id: ViewFields
source-tiddler-title-as-text: 
source-tiddler-title-as-link: 

To the right you see a field ''work menu'' for manipulating this content, currently only two buttons; <<toggle toggleTitle "H" >>for toggling the field header and the <span class="secMenuButton">{{$:/core/images/edit-button}}</span> edit button for the editor. I set it up so that hovering the menu //immediately// displays the editor.

Above the field you see the ''field head'' for settings of the field itself. ☑ //display// is checked or the field would only be visible in tiddler edit mode.

The @@background:#f4f4f4; [Type ▽ ]@@ is a (...supposed) drop down to //select// type, i.e what should //happen// to this text.... but it is not implemented so //this// example is a bit lame; I'm just displaying text like in a normal //text// field. Really the field should //apply// something, perhaps some CSS to this content, or it could be a big input argument for a macro.

 Imagine [[more tools|More menu tools]]; fold/expand field, "split out" field into new tiddler, etc.
modified: 20160102191929004
tags: 
title: About
use_case_exampe: A very illustrative example of a situation we've all been in - that of working with CSS in TW. You must normally do a repetitive cycle ride between;

*manipulating the CSS itself
*manipulating the code where the CSS is applied
*study the effect on the parsed result

Using view mode //fields// and an editing UI with a popup field editor, you can have all three parts in front of you, potentially in the one and same tiddler, and seeing results in real time.

''Super short, half true intro'': ~ViewFields shows fields in view mode. You also add and edit fields from viewmode. Somewhat like for tiddlers, the fields are given a //type// to apply to the content.

----

''Still too short intro, but better:''<br><br>
The //~ViewFields// theme puts ''fields at the very front end'' in the users workflow.

*fields are treated as basic ''encapsulators for content'' by 
*displaying them in view mode (on demand), as well as...
*...enabling direct editing via view mode

The user selects a ''field type'' - in addition to the tiddler types, there can be several //additional// ones. Basically the content becomes an //argument// to the field;

*a table goes into a field that applies certain table CSS, 
*...or it converts the content into a table to begin with
*make the content into a button using a button widget type field, 
*a text that should get foobar-macro'ed into a field set to foobar-type. 
*...and the foobar macro itself was constructed by defining it in a field that makes macros!
*...and several more based on widgets, macros, wikitext and user defined things.

:Thus fields encapsulate the content and applies the selected type

This should give a ''unfied and simplified UI with less repeated typing''. It should also reduce the threshold to TW by lessening the need to memorize magic words. ([[note|Fields for education]])

Further, the fields are ''added, edited and manipulated from view mode'' making for a very direct workflow. The traditional "edit mode" becomes more of a backstage thing.