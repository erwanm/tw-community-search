title: $:/rboue plugins/Three.js/introduction
created: 20141016153158911
modified: 20141020172205620
revision: 0
type: text/vnd.tiddlywiki
original-tags: 
source-wiki-id: rboue plugins
source-tiddler-title-as-text: Three.js/introduction
source-tiddler-title-as-link: Three.js%2fintroduction

The base plugin : [[Three.js|$:/plugins/rboue/Three.js]]
<br>
The extra plugin : [[Three.js-plus|$:/plugins/rboue/Three.js-plus]]

The extra plugin extends base plugin with numerous modules. With both you have an almost complete Three.js system.

!Demos
A few demos to play and see what you can do with Three.js :

[[Horse|Three.js/Demos/horse]]
[[Bubbles|Three.js/Demos/bubbles]]
[[Molecules|Three.js/Demos/molecules]]
[[Lava|Three.js/Demos/lava]]
[[Marchingcubes|Three.js/Demos/marchingcubes]]
[[Arealights|Three.js/Demos/arealights]]

!What is Three.js ?

A library that makes ~WebGL - 3D in the browser.

Links :
[[threejs.org|http://threejs.org/]]
[[Computer-graphics|http://math.hws.edu/eck/cs424/notes2013/]]
[[WebGL|http://get.webgl.org/]]
[[webglsamples.org|http://webglsamples.org/]]

!Three.js in ~TiddlyWiki environment
"""
The plugin provides a `<$view3js>` widget to execute Three.js programs and display graphical results and animations. ~TiddlyWiki can be used as a development tool for 3D - ~WebGL graphics.


__''What is a Three.js program ?''__
A Three.js program is a set of javascript instructions contained in a tiddler of type "application/javascript". It is run by a `<$view3js>` widget. It accesses the Three.js library via the `THREE` javascript object.

Requirements :
"""

* A main() function must be defined at top level. It is the program's entry point.
* The main() function must define one argument, an object with a `node` property, a reference to the root node of the widget. This node is a container for the Three.js renderer created by the program (or else your 3D objects will not stay inside the widget).
* The main() function should return an object with a callback property named `onTiddlerRefresh`. This callback is called every time the widget is refreshed by the ~TiddlyWiki's core, for example to resize Three.js scene and rendering.
* Program's exceptions are intercepted and error messages displayed. The program stops after the first exception.
* The program has access to widget context, especially the include mechanism (cf. require() function).

"""
The include mechanism is a simple way to extend the `THREE` object with modules or add new functionalities to the program. See plugin content for existing modules and watch demos and examples at threejs.org. Three.js library is documented at threejs.org.

The //tools.js// module defines useful tools to manipulate Three.js in ~TiddlyWiki environment. You can add it to your program with the following instruction :

&nbsp;&nbsp;&nbsp;&nbsp; `var Tools = require("./Lib/tools.js").Tools;`


__''3D data and model loading''__
In conventional Three.js programs, 3D data and models are searched around in server files or web pages (URLs beginning with "http://"). In ~TiddlyWiki's case, data are searched in local tiddlers.
The plugin allows the loading of tiddlers with the use of a special type of URL :
&nbsp;&nbsp;&nbsp;&nbsp; ''tw:''`title of a tiddler`

The plugin offers also an ambryo of filesystem and relative path handling. Let's say a Three.js program is stored in the tiddler named "My directory/my program", a 3D model in "My directory/my 3D body" and another 3D model in "My other directory/my 3D head". With relative path you can simply reference "my 3D body" and "my 3D head" in your program. This behaviour is configuration dependent (see below). You must define a `filesystem.PATH` attribute with the list of directories to search for page references.

Example of configuration and data loading with relative tiddler references :

Configuration tiddler (`$:config/rboue/Three.js`) :
"""

```
{
  "filesystem": {
    "PATH": "My directory;My other directory"
  },
  ...
}
```

or

Widget definition :

```
<$view3js tiddler="My directory/my program" path="My directory;My other directory" />
```


Program :

```
  ...
  var loader = new THREE.JSONLoader(true);
  loader.load("tw:my 3D body", function(geometry) {// etc...});
  loader.load("tw:my 3D head", function(geometry) {// etc...});
  ...
```

"""

__''&lt;$view3js&gt; widget''__
The widget offers an UI to Three.js rendering.
It executes a Three.js program and displays graphical results and animations.

The content of the `<$view3js>` widget is not interpreted.
"""

|Attribute |Description |h
|tiddler |The tiddler of the Three.js program |
|width |Width of the widget in pixel |
|height |Height of the widget in pixel (300 by default) |
|path |A list of directories to search under for the data tiddlers expected by Three.js loaders. It superseded the global configuration's attribute `filesystem.PATH` |
|class |An optional CSS class name to be assigned to the HTML element |

"""

__''Configuration''__
The plugin is configured via the `$:config/rboue/Three.js` tiddler (of type `application/json`).
Example of configuration :
"""

```
{
  "filesystem": {
    "PATH": "Three.js/Tests;Three.js/Tests1"
  }
}
```

|Attribute |Description |h
|filesystem |Activates the pseudo filesystem behaviour. `PATH` is a list of absolute directories to search under when data tiddlers are loaded by the Three.js loaders  |
