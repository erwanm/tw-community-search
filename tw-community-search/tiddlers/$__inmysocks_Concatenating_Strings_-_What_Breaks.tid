title: $:/inmysocks/Concatenating Strings - What Breaks
blurb:  How to build strings from the content of different fields.
created: 20150105183440141
demonstration1: http://{{Concatenating Strings - What Breaks!!this_field}}.com
demonstration2: http://tiddlywiki.com
modified: 20150105201713896
this_field: tiddlywiki
tiddler_name: Concatenating Strings - What Breaks
tags: [[inmysocks]]  [[String Manipulation in Macros]]
source-wiki-id: inmysocks
source-tiddler-title-as-text: Concatenating Strings - What Breaks
source-tiddler-title-as-link: Concatenating%20Strings%20-%20What%20Breaks

\define buildFirstString()
{{$(tiddlerName)$!!this_field}}
\end

\define getTransclusion()
http://$(firstString)$.com
\end

''I will add more to this if I find more cases that break or don't act as expected.''

Some explaination of how things work from Jeremy in this thread: https://groups.google.com/forum/#!topic/tiddlywiki/QXaD2i6tWeo

* Invoking a macro with double angle brackets causes the result of the macro (after parameter and variable substitutions) to be wikified (as expected)
* Using a macro as a widget/element attribute (eg `<div class=<<myMacro>>>`) doesn't wikify the result of the macro; the plain result of the macro is assigned to the attribute. ''This one is the reason why the problem in the `Using parameters passed to macros to create strings` part happens. The `<$set name=firstString value=<<buildFirstString>>>` line doesn't wikify the output of `<<buildFirstString>>`. There may be a simpler fix than I have used here.''
* Invoking a macro with double angle brackets doesn't allow parameters to be specified as transclusions or macro invocations; you can only use plain strings. ''This one is why the first example doesn't work.''
* Macros can also be invoked with the `<$macrocall>` widget, which does allow attributes to be specified as transclusions or macro invocations. ''This could fix the first one, I am less certain of the second. I am not sure if it would be simpler using $macrocall or not.''

I will try to write out some examples of what works and what doesn't later.

!Using parameters passed to macros to create strings

I will add this section eventually, but the idea is that `<<someMacro {{!!field_containing_string}}>>` where `someMacro` is

```
\define someMacro(string)
http://$string$.com
\end
```

will not work. 

Until I expand this section the tiddler [[Concatenating text to make dynamic URLs]] shows what does work.

!Simplest example using two levels of variables
This is the simplest example I could make of what breaks, because of this there are other ways around this, but situations can come up where this would become a problem.

One example that breaks, note that there are two 'levels', that is a string is built by setting a variable and using that variable in a macro, then the resulting string is set as a variable which is in turn used in another macro to build a second string. This doesn't work.:

```
\define buildFirstString()
{{$(tiddlerName)$!!this_field}}
\end

\define getTransclusion()
http://$(firstString)$.com
\end

<$select field='this_field'>
<option>sluggy</option>
<option>tiddlywiki</option>
</$select>

<$set name=tiddlerName value={{!!tiddler_name}}>
<$set name=firstString value=<<buildFirstString>>>
<<getTransclusion>><br>
<$button><$action-setfield $field=demonstration1 $value=<<getTransclusion>>/>Set the field</$button>
</$set>
</$set>

And the field contains:

<$view field=demonstration1/>
```

Gives:

<$select field='this_field'>
<option>sluggy</option>
<option>tiddlywiki</option>
</$select>

<$set name=tiddlerName value={{!!tiddler_name}}>
<$set name=firstString value=<<buildFirstString>>>
<<getTransclusion>><br>
<$button><$action-setfield $field=demonstration1 $value=<<getTransclusion>>/>Set the field</$button>
</$set>
</$set>

And the field contains:

<$view field=demonstration1/>


Which isn't what we want.

Fortunately there is an easy way around this by using the set widget and filters, so

```
\define getTransclusion()
$(firstString)$.com
\end

\define thisFilter()
[[$(tiddlerName)$]get[this_field]]
\end

<$set name=tidName value={{!!tiddler_name}}>
<$set name=firstString filter='[<tidName>get[this_field]]'>
<<getTransclusion>><br>
<$button><$action-setfield $field=demonstration2 $value=<<getTransclusion>>/>Set the field</$button>
</$set>
</$set>

And the field contains: 

<$view field=demonstration2/>
```

Gives:

<$select field='this_field'>
<option>sluggy</option>
<option>tiddlywiki</option>
</$select>

<$set name=tidName value={{!!tiddler_name}}>
<$set name=firstString filter='[<tidName>get[this_field]]'>
<<getTransclusion>><br>
<$button><$action-setfield $field=demonstration2 $value=<<getTransclusion>>/>Set the field</$button>
</$set>
</$set>

And the field contains: 

<$view field=demonstration2/>

<<bottomOfTiddler>>