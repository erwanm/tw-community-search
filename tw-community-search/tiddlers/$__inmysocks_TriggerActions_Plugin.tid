title: $:/inmysocks/TriggerActions Plugin
created: 20150222054156574
modified: 20150424012359830
tags:  [[Utility Plugins]] [[My Project]]
source-wiki-id: inmysocks
source-tiddler-title-as-text: TriggerActions Plugin
source-tiddler-title-as-link: TriggerActions%20Plugin

!''This plugin requires tiddlywiki 5 version 5.1.8-prerelease or newer to work. On any older version it will probably not work.''

Since this wiki isn't using the prerelease it doesn't have the plugin installed, you can get the plugin and see a simple example [[here|http://ooktech.com/jed/ExampleWikis/TriggerActions/]].

This plugin has two parts which will probably be split into separate plugins at some point.

!Trigger Actions

---

This is a [[daemon|https://en.wikipedia.org/wiki/Daemon_%28computing%29]] that works in the background and listens for changes to a set of tiddlers, if one of those tiddlers changes than a list of actions is performed.

How to use the trigger actions functions:

#''Set the expression tiddler filter'' - The plugin adds a tab to the [[$:/ControlPanel]] called `Trigger Actions Settings`, on this tab you can define a filter and each tiddler returned by this filter is considered an expression tiddler. The default filter is `[tag[$:/tags/Trigger]]`, so any tiddler tagged with `$:/tags/Trigger` will be an expression tiddler.
#''Create an expression tiddler'' - Simply create a tiddler with whatever name you want and give it and tag it with `$:/tags/Trigger` or whatever you have chosen using the filter in the first step.
#''Define the expressions for each expression tiddler'' - Each expression tiddler is displayed using a custom view template that has 5 input fields:
#* A checkbox labeled 'Set as active', if this isn't checked than the actions listed in the tiddler won't ever trigger. You should have this unchecked while editing the parameters.
#* A text field labeled 'Listen Filter'. Enter a filter here and tiddlers retuned by this filter will trigger the actions defined in whenever the any of the returned tiddlers are changed. This only happens if the 'Set as active' checkbox is checked.
#* A text field labeled 'Action Filter'. The filter entered here will define the tiddlers to be acted upon. This means that each of the defined actions will be executed with the currentTiddler variable set to each one of the tiddlers returned by this filter in turn.
#* A text field labeled 'Name'. This field requires a valid field name, which means it can contain lower case letters, numbers, and the characters `-` and `_`.
#* A text field labeled 'Action' this field takes an action widget expression.

Once both the Name and Action fields are filled in click the `Add` button and the action will be listed at the bottom of the tiddler. Multiple actions can be added and the actions in the list can be edited if desired. Only one action widget is allowed per action added, anything other than an action widget will be ignored, if there are multiple action widgets listed only the first one will be executed.

When a change is detected in any of the tiddlers returned by the listen filter than the process will iterate through each tiddler returned by the action filter. In each of the tiddlers returned by the action filter, each of the action widgets listed in the expression tiddler will be triggered. Here 'in each of the tiddlers' means that the currentTiddler variable is set to each tiddler in turn. So the action widget expression `<$action-setfield $field=foo $value=bar/>` would set the foo field to bar in each one of the tiddlers returned by the action filter.

''Note:'' To prevent infinite update loops no tiddler that triggers an action can be modified by the trigger actions daemon. If you find a way to violate this please let me know so I can fix it, if this behaviour is allowed than it can cause infinite updating loops which can do terrible things.

!Startup Actions

---

This is a process that is triggered during the startup sequence of the wiki, and the actions defined are executed each time the wiki is loaded. The actions allowed in the startup actions can be significantly more complex than in the trigger actions part. This is because the trigger acitons expressions are triggered each time there is a change and strict limits on what can be done are required to prevent infinite loops, while the startup actions happen only once and won't cause the same sort of problems if they aren't well thought out.

Triggering startup actions is simpler than the trigger actions daemon:

Any tiddler that has the tag `$:/tags/StartupAction` will be triggered on startup. This means that any action widgets listed will be invoked. Because there are fewer restrictions on the startup actions some more complex behavior can also be used, such as using reveal widgets to conditionally trigger action widgets. The two examples I have for the moment are [[shamelessly stolen from Jeremy||https://github.com/Jermolene/TiddlyWiki5/issues/1438]]:

Change the palette if the vanilla theme was selected:

```
<$reveal type="match" state="$:/theme" text="$:/themes/tiddlywiki/vanilla/">
<$action-setfield $tiddler="$:/palette" $value="$:/_myFunkyPalette"/>
</$reveal>
```

Display a license agreement modal if the user hasn't already agreed:

```
<$reveal type="nomatch" state="$:/_hasAgreedLicense" text="yes">
<$action-sendmessage $message="tm-modal" $param="$:/_myLicenseAgreement"/>
</$reveal>
```

