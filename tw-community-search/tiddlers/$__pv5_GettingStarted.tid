title: $:/pv5/GettingStarted
created: 20141119201059289
modified: 20141121095143275
original-tags: 
source-wiki-id: pv5
source-tiddler-title-as-text: GettingStarted
source-tiddler-title-as-link: GettingStarted

This summary is based on excellent posts by [[Jed Carty|https://groups.google.com/d/msg/tiddlywiki/_x9CDAFtwQc/XKGuffTkLVwJ]] and [[Danielo Rodrigues|https://groups.google.com/d/msg/tiddlywiki/1BjhyWKpTgg/b4mFt4CqYt4J]] on using variables and parameters. Also see:

* [[Variables vs. Parameters|http://tb5.tiddlyspot.com/#Variables%20vs.%20Parameters]] â€” short and sweet
* [[Variables In Nested Lists|http://tb5.tiddlyspot.com/#Variables%20In%20Nested%20Lists]]
* [[Passing Parameters To A Transclusion|http://tb5.tiddlyspot.com/#Passing%20Parameters%20To%20A%20Transclusion]]

<br>

!Defining Variables
!! `<$set>`

Set variables inside or outside a macro:

```
<$set name='var' value='foo'>
<<var>> "<<var>>"
</$set>
```

<<<
<$set name='var' value='foo'>
<<var>> "<<var>>"
</$set>
<<<


<br>
When the value is set as a filter it can be used as a filter:

```
<$set name="var" value="[all[missing]]">
<$list filter=<<var>>/>
</$set>
```

<<<
<$set name="var" value="[all[missing]]">
<$list filter=<<var>>/>
</$set>
<<<

<br>

!! `<$list>`


`<<currentTiddler>>` inside the list will be the item!

```
<$list filter="[tag[Foo]]">
"<<currentTiddler>>"
</$list>
```

<<<
<$list filter="[tag[Foo]]">
"<<currentTiddler>>"
</$list>
<<<

<br>

On the other hand, the parameter `variable` sets a variable at each iteration to the current list item:

```
Parent / Item...<br>
<$list filter="[tag[Foo]]" variable="myItem">
<<currentTiddler>> / <<myItem>><br>
</$list>
```

<<<
Parent / Item...<br>
<$list filter="[tag[Foo]]" variable="myItem">
<<currentTiddler>> / <<myItem>><br>
</$list>
<<<

<br>

!Using Variables And Macro Parameters

!!`<<var>>`
a [[variable|http://tiddlywiki.com/#Variables]] acting the same inside a macro as outside

;~~`$var$`~~ and ~~`"$var$"`~~
:with ''var'' being an actual variable, these are @@ciolor:red; just strings@@
:no substitution will take place, inside or outside a macro

<br>

!!`$param$`

As macro parameters, both `$param$` and `"$param$"` are substituted fine!

Using <<source MacroTest>>

With...

```
<$set name='var' value={{!!title}}>
<<test GettingStarted>>
</$set>
```

<<<
<$set name='var' value={{!!title}}>
<<test GettingStarted>>
</$set>
<<<

''Note:'' `<<test "<<var>>">>` does @@color:red; NOT@@ work!

<br>

!! `$(var)$`
to reference variables when calling another macro from within a macro

Using <<source MacroLink>>

With:

```
<$set name="var" value="Foo">>
<<doLink>>
</$set>
```

<<<
<$set name="var" value="Foo">>
<<doLink>>
</$set>
<<<

;~~`[tag[$(var)$]]`~~
:used as a filter, gives tiddlers tagged `$(var)$` @@color:red; ...without any substitution!@@

<br>

!!`{{!!field}}`

Using transcluded parameters can be tricky.

For example, trying to use <<source MacroLink>>

@@color:red; Fails with:@@

```
<<link {{!!title}}>>
```

<<<
<<link {{!!title}}>>
<<<

Instead, use the `$macrocall` widget, paying attention with the variable ''__$__''name:

```
<$macrocall $name="link" tiddler={{!!title}}/>
```

<<<
<$macrocall $name="link" tiddler={{!!title}}/>
<<<

Quotes around the transcluded parameter @@color:red; will fail, too!@@

```
<$macrocall $name="link" tiddler="{{!!title}}"/>
```

<<<
<$macrocall $name="link" tiddler="{{!!title}}"/>
<<<

<br>

!!``<var>``

Does __only__ work as a __filter variable__, inside or outside a macro:

```
<$set name='var' value='Foo'>
<$list filter='[tag<var>]'/>
</$set>
```

<<<
<$set name='var' value='Foo'>
<$list filter='[tag<var>]'/>
</$set>
<<<

Example for using `<var>` inside <<source MacroTaggingByVar>>

With...

```
<$set name='var' value='Foo'>
<<taggingByVar>>
</$set>
```

<<<
<$set name='var' value='Foo'>
<<taggingByVar>>
</$set>
<<<

''@@color:red; Important:@@'' Make sure not to enclose `<var>` in angle brackets: ~~`[tag[<var>]]`~~!

Otherwise...

;~~`<var>`~~
:__in wikitext__ is parsed as any other html tag, so it's @@color:red; not a valid variable@@
;~~`"<var>"`~~
:is the same as putting quotes around any tag where it displays quotes
;~~`[[<var>]]`~~
:treated as a string, so it creates a link to [[<var>]]

<br>

!! @@color:green; Good luck now!@@